version: "3.8"
x-app: &app
  build:
    context: .
    args:
      RUBY_VERSION: "3.2.0"
      PG_MAJOR: "15"
      NODE_MAJOR: "18"
  image: prepared-dev:1.0.0
  environment: &env
    NODE_ENV: ${NODE_ENV:-development}
    RAILS_ENV: ${RAILS_ENV:-development}
  tmpfs:
    - /tmp
    - /app/tmp/pids

x-backend: &backend
  <<: *app
  stdin_open: true
  tty: true
  volumes:
    - ..:/app:cached
    - bundle:/usr/local/bundle
    - rails_cache:/app/tmp/cache
    - assets:/app/public/assets
    - node_modules:/app/node_modules
    - history:/usr/local/hist
    - ./.psqlrc:/root/.psqlrc:ro
    - ./.bashrc:/root/.bashrc:ro
  environment: &backend_environment
    <<: *env
    DATABASE_URL: postgres://postgres:postgres@postgres:5432
    DB_NAME: prepared_development
    DB_USER: postgres
    DB_PASSWORD: postgres
    MALLOC_ARENA_MAX: 2
    WEB_CONCURRENCY: ${WEB_CONCURRENCY:-1}
    BOOTSNAP_CACHE_DIR: /usr/local/bundle/_bootsnap
    XDG_DATA_HOME: /app/tmp/cache
    YARN_CACHE_FOLDER: /app/node_modules/.yarn-cache
    HISTFILE: /usr/local/hist/.bash_history
    PSQL_HISTFILE: /usr/local/hist/.psql_history
    IRB_HISTFILE: /usr/local/hist/.irb_history
    EDITOR: vi
  depends_on:
    postgres:
      condition: service_healthy

services:
  rails:
    <<: *backend
    command: bundle exec rails
  web:
    <<: *backend
    command: bundle exec rails server -b 0.0.0.0
    ports:
      - "3000:3000"
  postgres:
    image: postgres:15
    volumes:
      - .psqlrc:/root/.psqlrc:ro
      - postgres:/var/lib/postgresql/data
      - history:/usr/local/hist
    environment:
      PSQL_HISTFILE: /usr/local/hist/.psql_history
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: prepared_development
    expose:
      - 5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 12
  cache:
    tty: true
    image: "public.ecr.aws/readyset/readyset:latest"
    platform: linux/amd64
    volumes:
      - readyset:/state
    environment:
      DEPLOYMENT_ENV: quickstart_docker
      PROMETHEUS_METRICS: true
      DB_DIR: /state
      QUERY_CACHING: explicit
      QUERY_LOG: true
      QUERY_LOG_AD_HOC: true
      STANDALONE: true
      DEPLOYMENT: docker_compose_deployment
      LISTEN_ADDRESS: 0.0.0.0:5433
      UPSTREAM_DB_URL: postgres://postgres:postgres@postgres:5432/prepared_development
      CONTROLLER_ADDRESS: 0.0.0.0
    restart: on-failure
    ports:
      # The ReadySet Adapter listen port, i.e. what your application / SQL shell connects to
      - "5433:5433"
      - "6034:6034"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "127.0.0.1:6034/health"]
      interval: 2s
      timeout: 1s
      retries: 5
      start_period: 5s
  prometheus:
    image: "public.ecr.aws/readyset/readyset-prometheus:latest"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 12
    expose:
      - 9090
    volumes:
      - "prometheus:/prometheus"
  pushgateway:
    image: prom/pushgateway
    expose:
      - 9091
  grafana:
    image: "public.ecr.aws/readyset/readyset-grafana:latest"
    ports:
      - 4000:4000
    environment:
      UPSTREAM_DB_URL: postgres://postgres:postgres@localhost:5432/prepared_development
      RS_PORT: 5433
      RS_GRAFANA_PORT: 4000
volumes:
  bundle:
  node_modules:
  history:
  rails_cache:
  postgres:
  assets:
  readyset:
  prometheus:
